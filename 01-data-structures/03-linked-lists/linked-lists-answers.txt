Complete this assignment in Ruby. Do not use pre-existing push and pop functionality that Ruby provides.

Use the linked_list_spec.rb spec file, node.rband linked_list.rb skeleton files in the sep-assignments repository to create a custom node and linked list implementation in Ruby.
LinkedList must keep track of its head node.
Create LinkedList#add_to_tail(node). This method inserts a Node at the end of the list.
Create LinkedList#remove_tail. This method removes the last node in the lists and must keep the rest of the list intact.
Create LinkedList#print. This method prints out a representation of the list.
Create LinkedList#delete(node). This method removes node from the list and must keep the rest of the list intact.
Create LinkedList#add_to_front(node). This method adds node to the front of the list and must set the list's head to node.
Create LinkedList#remove_front. This method removes and returns the first node in the Linked List and must set Linked List's head to the second node.
Provide written answers for each and put them in linked-lists-answers.txt:

What is Spatial Locality and why does it benefit performance?
Compare the performance of an Array to a Linked List using the Benchmark module.
Compare the time it takes to create a 10,000 item Array to appending 10,000 items to a Linked List.
Compare the time it takes to access the 5000th element of the Array and the 5000th Node in the Linked List.
Compare the time it takes to remove the 5000th element from the Array to removing the 5000th Node in the Linked List.
In the Array, the 5001st item becomes the 5000th, and so on.