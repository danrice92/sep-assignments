1. It would take seven iterations for iterative search to land on G in the letters A to G.
2. It would take three iterations for binary search to land on G in the letters A to G (though this advantage only works if the collection is sorted).
3. Fibonacci:

1. 1
2. 1
3. 2
4. 3
5. 5
6. 8
7. 13
8. 21
9. 34
10. 55
11. 89
12. 144

Fibonacci iterative and recursive took a similar amount of time to calculate fib(20). For kicks, I tried fib(2000) in both and recursive took way, way longer.

4. Given that the collection is unsorted, binary search is basically useless, so I would use an iterative solution to look through a million items, but use a loop rather than a recursive algorithm to do so because performance is so much worse in large data sets (or at least it is in the Fibonacci recursive algorithm; I'm guessing this is because every time it recurs, it has to go through the entire method all over again, where the iterative version just has to do math).

5. A sorted collection would definitely be much better to do with binary search. I would probably use a recursive solution if the performance isn't significantly damaged because the code is usually cleaner to read, but I'm inclined to think a loop is more efficient.
